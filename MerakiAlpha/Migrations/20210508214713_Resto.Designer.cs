// <auto-generated />
using System;
using MerakiAlpha.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MerakiAlpha.Migrations
{
    [DbContext(typeof(MerakiContext))]
    [Migration("20210508214713_Resto")]
    partial class Resto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MerakiAlpha.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Celular")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdGeneroNavigationIdGenero")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoDocumentoNavigationIdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdGeneroNavigationIdGenero");

                    b.HasIndex("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colores");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Conductore", b =>
                {
                    b.Property<int>("IdConductor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Celular")
                        .HasColumnType("int");

                    b.Property<string>("CodigoV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoVNavigationCodigoV")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Correo")
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("Date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("Date");

                    b.Property<string>("FotoConductor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdGeneroNavigationIdGenero")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoDocumentoNavigationIdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.HasKey("IdConductor");

                    b.HasIndex("CodigoVNavigationCodigoV");

                    b.HasIndex("IdGeneroNavigationIdGenero");

                    b.HasIndex("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.ToTable("Conductores");
                });

            modelBuilder.Entity("MerakiAlpha.Models.EstadoServicio", b =>
                {
                    b.Property<int>("IdEstadoServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadoServicio");

                    b.ToTable("EstadoServicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.EstadoUsuario", b =>
                {
                    b.Property<int>("IdEstadoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadoUsuario");

                    b.ToTable("EstadoUsuarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGenero");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Propietario", b =>
                {
                    b.Property<int>("IdPropietario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Celular")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdGeneroNavigationIdGenero")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoDocumentoNavigationIdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.HasKey("IdPropietario");

                    b.HasIndex("IdGeneroNavigationIdGenero");

                    b.HasIndex("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.ToTable("Propietarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Role", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CelularRecibe")
                        .HasColumnType("int");

                    b.Property<string>("DireccionCarga")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DireccionEntrega")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int?>("IdClienteNavigationIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdConductor")
                        .HasColumnType("int");

                    b.Property<int?>("IdConductorNavigationIdConductor")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoServicio")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstadoServicioNavigationIdEstadoServicio")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoCarga")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoCargaNavigationIdTipoCarga")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoVehiculo")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoVehiculoNavigationIdTipoVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("PersonaRecibe")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("PrecioServicio")
                        .HasColumnType("float");

                    b.HasKey("IdServicio");

                    b.HasIndex("IdClienteNavigationIdCliente");

                    b.HasIndex("IdConductorNavigationIdConductor");

                    b.HasIndex("IdEstadoServicioNavigationIdEstadoServicio");

                    b.HasIndex("IdTipoCargaNavigationIdTipoCarga");

                    b.HasIndex("IdTipoVehiculoNavigationIdTipoVehiculo");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TipoCarga", b =>
                {
                    b.Property<int>("IdTipoCarga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoCarga");

                    b.ToTable("TipoCargas");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TipoVehiculo", b =>
                {
                    b.Property<int>("IdTipoVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoVehiculo");

                    b.ToTable("TipoVehiculos");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TiposDocumento", b =>
                {
                    b.Property<int>("IdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoDocumento");

                    b.ToTable("TiposDocumentos");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Vehiculo", b =>
                {
                    b.Property<string>("CodigoV")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cilindraje")
                        .HasColumnType("int");

                    b.Property<string>("FotoV")
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("IdColorId")
                        .HasColumnType("int");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<int?>("IdMarcasId")
                        .HasColumnType("int");

                    b.Property<int>("IdPropietario")
                        .HasColumnType("int");

                    b.Property<int?>("IdPropietarioNavigationIdPropietario")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoVehiculo")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoVehiculoNavigationIdTipoVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .HasColumnType("varchar(8)");

                    b.Property<string>("SeguroCarga")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Soat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TecnoMecanica")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("idColor")
                        .HasColumnType("int");

                    b.HasKey("CodigoV");

                    b.HasIndex("IdColorId");

                    b.HasIndex("IdMarcasId");

                    b.HasIndex("IdPropietarioNavigationIdPropietario");

                    b.HasIndex("IdTipoVehiculoNavigationIdTipoVehiculo");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("MerakiAlpha.Usuarios.UsuarioIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstadoNavigationIdEstadoUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int?>("IdRolNavigationIdRol")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoNavigationIdEstadoUsuario");

                    b.HasIndex("IdRolNavigationIdRol");

                    b.ToTable("UsuariosIdentity");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Cliente", b =>
                {
                    b.HasOne("MerakiAlpha.Models.Genero", "IdGeneroNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdGeneroNavigationIdGenero");

                    b.HasOne("MerakiAlpha.Models.TiposDocumento", "IdTipoDocumentoNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.Navigation("IdGeneroNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Conductore", b =>
                {
                    b.HasOne("MerakiAlpha.Models.Vehiculo", "CodigoVNavigation")
                        .WithMany("Conductores")
                        .HasForeignKey("CodigoVNavigationCodigoV");

                    b.HasOne("MerakiAlpha.Models.Genero", "IdGeneroNavigation")
                        .WithMany("Conductores")
                        .HasForeignKey("IdGeneroNavigationIdGenero");

                    b.HasOne("MerakiAlpha.Models.TiposDocumento", "IdTipoDocumentoNavigation")
                        .WithMany("Conductores")
                        .HasForeignKey("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.Navigation("CodigoVNavigation");

                    b.Navigation("IdGeneroNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Propietario", b =>
                {
                    b.HasOne("MerakiAlpha.Models.Genero", "IdGeneroNavigation")
                        .WithMany("Propietarios")
                        .HasForeignKey("IdGeneroNavigationIdGenero");

                    b.HasOne("MerakiAlpha.Models.TiposDocumento", "IdTipoDocumentoNavigation")
                        .WithMany("Propietarios")
                        .HasForeignKey("IdTipoDocumentoNavigationIdTipoDocumento");

                    b.Navigation("IdGeneroNavigation");

                    b.Navigation("IdTipoDocumentoNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Servicio", b =>
                {
                    b.HasOne("MerakiAlpha.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdClienteNavigationIdCliente");

                    b.HasOne("MerakiAlpha.Models.Conductore", "IdConductorNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdConductorNavigationIdConductor");

                    b.HasOne("MerakiAlpha.Models.EstadoServicio", "IdEstadoServicioNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdEstadoServicioNavigationIdEstadoServicio");

                    b.HasOne("MerakiAlpha.Models.TipoCarga", "IdTipoCargaNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdTipoCargaNavigationIdTipoCarga");

                    b.HasOne("MerakiAlpha.Models.TipoVehiculo", "IdTipoVehiculoNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdTipoVehiculoNavigationIdTipoVehiculo");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdConductorNavigation");

                    b.Navigation("IdEstadoServicioNavigation");

                    b.Navigation("IdTipoCargaNavigation");

                    b.Navigation("IdTipoVehiculoNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Vehiculo", b =>
                {
                    b.HasOne("MerakiAlpha.Models.Color", "IdColor")
                        .WithMany("Colores")
                        .HasForeignKey("IdColorId");

                    b.HasOne("MerakiAlpha.Models.Marca", "IdMarcas")
                        .WithMany("Marcas")
                        .HasForeignKey("IdMarcasId");

                    b.HasOne("MerakiAlpha.Models.Propietario", "IdPropietarioNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdPropietarioNavigationIdPropietario");

                    b.HasOne("MerakiAlpha.Models.TipoVehiculo", "IdTipoVehiculoNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdTipoVehiculoNavigationIdTipoVehiculo");

                    b.Navigation("IdColor");

                    b.Navigation("IdMarcas");

                    b.Navigation("IdPropietarioNavigation");

                    b.Navigation("IdTipoVehiculoNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Usuarios.UsuarioIdentity", b =>
                {
                    b.HasOne("MerakiAlpha.Models.EstadoUsuario", "IdEstadoNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEstadoNavigationIdEstadoUsuario");

                    b.HasOne("MerakiAlpha.Models.Role", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRolNavigationIdRol");

                    b.Navigation("IdEstadoNavigation");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Cliente", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Color", b =>
                {
                    b.Navigation("Colores");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Conductore", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.EstadoServicio", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.EstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Genero", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Conductores");

                    b.Navigation("Propietarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Marca", b =>
                {
                    b.Navigation("Marcas");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Propietario", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TipoCarga", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TipoVehiculo", b =>
                {
                    b.Navigation("Servicios");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("MerakiAlpha.Models.TiposDocumento", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Conductores");

                    b.Navigation("Propietarios");
                });

            modelBuilder.Entity("MerakiAlpha.Models.Vehiculo", b =>
                {
                    b.Navigation("Conductores");
                });
#pragma warning restore 612, 618
        }
    }
}
